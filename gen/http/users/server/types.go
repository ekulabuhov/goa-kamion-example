// Code generated by goa v3.7.3, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen goa-kamion-example/design

package server

import (
	users "goa-kamion-example/gen/users"

	goa "goa.design/goa/v3/pkg"
)

// InviteRequestBody is the type of the "users" service "invite" endpoint HTTP
// request body.
type InviteRequestBody struct {
	User *LoginInviteBodyRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// InviteResponseBody is the type of the "users" service "invite" endpoint HTTP
// response body.
type InviteResponseBody struct {
	// Status of the performed request
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// LoginInviteBodyRequestBody is used to define fields on request body types.
type LoginInviteBodyRequestBody struct {
	// New user email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// New user password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// ID of the organisation he was invited to
	OrganisationID *string `form:"organisationID,omitempty" json:"organisationID,omitempty" xml:"organisationID,omitempty"`
}

// NewInviteResponseBody builds the HTTP response body from the result of the
// "invite" endpoint of the "users" service.
func NewInviteResponseBody(res *users.AuthUserResponse) *InviteResponseBody {
	body := &InviteResponseBody{
		Status: res.Status,
	}
	return body
}

// NewInvitePayload builds a users service invite endpoint payload.
func NewInvitePayload(body *InviteRequestBody) *users.InvitePayload {
	v := &users.InvitePayload{}
	if body.User != nil {
		v.User = unmarshalLoginInviteBodyRequestBodyToUsersLoginInviteBody(body.User)
	}

	return v
}

// ValidateInviteRequestBody runs the validations defined on InviteRequestBody
func ValidateInviteRequestBody(body *InviteRequestBody) (err error) {
	if body.User != nil {
		if err2 := ValidateLoginInviteBodyRequestBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLoginInviteBodyRequestBody runs the validations defined on
// LoginInviteBodyRequestBody
func ValidateLoginInviteBodyRequestBody(body *LoginInviteBodyRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.OrganisationID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("organisationID", "body"))
	}
	return
}
