// Code generated by goa v3.7.3, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen goa-kamion-example/design

package client

import (
	users "goa-kamion-example/gen/users"

	goa "goa.design/goa/v3/pkg"
)

// InviteRequestBody is the type of the "users" service "invite" endpoint HTTP
// request body.
type InviteRequestBody struct {
	User *LoginInviteBodyRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// InviteResponseBody is the type of the "users" service "invite" endpoint HTTP
// response body.
type InviteResponseBody struct {
	// Status of the performed request
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// LoginInviteBodyRequestBody is used to define fields on request body types.
type LoginInviteBodyRequestBody struct {
	// New user email
	Email string `form:"email" json:"email" xml:"email"`
	// New user password
	Password string `form:"password" json:"password" xml:"password"`
	// ID of the organisation he was invited to
	OrganisationID string `form:"organisationID" json:"organisationID" xml:"organisationID"`
}

// NewInviteRequestBody builds the HTTP request body from the payload of the
// "invite" endpoint of the "users" service.
func NewInviteRequestBody(p *users.InvitePayload) *InviteRequestBody {
	body := &InviteRequestBody{}
	if p.User != nil {
		body.User = marshalUsersLoginInviteBodyToLoginInviteBodyRequestBody(p.User)
	}
	return body
}

// NewInviteAuthUserResponseOK builds a "users" service "invite" endpoint
// result from a HTTP "OK" response.
func NewInviteAuthUserResponseOK(body *InviteResponseBody) *users.AuthUserResponse {
	v := &users.AuthUserResponse{
		Status: body.Status,
	}

	return v
}

// ValidateInviteResponseBody runs the validations defined on InviteResponseBody
func ValidateInviteResponseBody(body *InviteResponseBody) (err error) {
	if body.Status != nil {
		if !(*body.Status == "success" || *body.Status == "failure") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"success", "failure"}))
		}
	}
	return
}
