// Code generated by goa v3.7.3, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen goa-kamion-example/design

package cli

import (
	"flag"
	"fmt"
	usersc "goa-kamion-example/gen/http/users/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `users invite
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` users invite --body '{
      "user": {
         "email": "test@test.com",
         "organisationID": "0763c56a-673b-4d30-9777-43cb1720ddfb",
         "password": "Password!1"
      }
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersInviteFlags    = flag.NewFlagSet("invite", flag.ExitOnError)
		usersInviteBodyFlag = usersInviteFlags.String("body", "REQUIRED", "")
	)
	usersFlags.Usage = usersUsage
	usersInviteFlags.Usage = usersInviteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "users":
			svcf = usersFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "users":
			switch epn {
			case "invite":
				epf = usersInviteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "users":
			c := usersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "invite":
				endpoint = c.Invite()
				data, err = usersc.BuildInvitePayload(*usersInviteBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `Service is the users service interface.
Usage:
    %[1]s [globalflags] users COMMAND [flags]

COMMAND:
    invite: Invite implements invite.

Additional help:
    %[1]s users COMMAND --help
`, os.Args[0])
}
func usersInviteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users invite -body JSON

Invite implements invite.
    -body JSON: 

Example:
    %[1]s users invite --body '{
      "user": {
         "email": "test@test.com",
         "organisationID": "0763c56a-673b-4d30-9777-43cb1720ddfb",
         "password": "Password!1"
      }
   }'
`, os.Args[0])
}
